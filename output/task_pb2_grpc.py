# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import task_pb2 as task__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in task_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TasksServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateTask = channel.unary_unary(
                '/tasks.TasksService/CreateTask',
                request_serializer=task__pb2.CreateTaskRequest.SerializeToString,
                response_deserializer=task__pb2.CreateTaskResponse.FromString,
                _registered_method=True)
        self.UpdateTask = channel.unary_unary(
                '/tasks.TasksService/UpdateTask',
                request_serializer=task__pb2.UpdateTaskReq.SerializeToString,
                response_deserializer=task__pb2.UpdateTaskRes.FromString,
                _registered_method=True)
        self.GetTasks = channel.unary_unary(
                '/tasks.TasksService/GetTasks',
                request_serializer=task__pb2.GetTasksReq.SerializeToString,
                response_deserializer=task__pb2.GetTasksRes.FromString,
                _registered_method=True)
        self.DeleteTask = channel.unary_unary(
                '/tasks.TasksService/DeleteTask',
                request_serializer=task__pb2.DeleteTaskReq.SerializeToString,
                response_deserializer=task__pb2.DeleteTaskRes.FromString,
                _registered_method=True)
        self.GetTask = channel.unary_unary(
                '/tasks.TasksService/GetTask',
                request_serializer=task__pb2.GetTaskReq.SerializeToString,
                response_deserializer=task__pb2.GetTaskRes.FromString,
                _registered_method=True)


class TasksServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTask(self, request, context):
        """
        Handles updating a task.
        Best practice: Validate input, perform update, handle errors, and return response.
        """
        # Example best-practice structure:
        # 1. Validate request
        # 2. Perform update (delegate to your business logic)
        # 3. Handle errors and set context if needed
        # 4. Return UpdateTaskRes

        # --- Best practice template ---
        # if not request.id:
        #     context.set_code(grpc.StatusCode.INVALID_ARGUMENT)
        #     context.set_details('Task ID is required.')
        #     return task__pb2.UpdateTaskRes()  # or appropriate error response

        # try:
        #     updated_task = your_update_task_logic(request)
        #     return task__pb2.UpdateTaskRes(task=updated_task)
        # except Exception as e:
        #     context.set_code(grpc.StatusCode.INTERNAL)
        #     context.set_details(str(e))
        #     return task__pb2.UpdateTaskRes()  # or appropriate error response

        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTasks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TasksServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateTask': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTask,
                    request_deserializer=task__pb2.CreateTaskRequest.FromString,
                    response_serializer=task__pb2.CreateTaskResponse.SerializeToString,
            ),
            'UpdateTask': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTask,
                    request_deserializer=task__pb2.UpdateTaskReq.FromString,
                    response_serializer=task__pb2.UpdateTaskRes.SerializeToString,
            ),
            'GetTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTasks,
                    request_deserializer=task__pb2.GetTasksReq.FromString,
                    response_serializer=task__pb2.GetTasksRes.SerializeToString,
            ),
            'DeleteTask': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTask,
                    request_deserializer=task__pb2.DeleteTaskReq.FromString,
                    response_serializer=task__pb2.DeleteTaskRes.SerializeToString,
            ),
            'GetTask': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTask,
                    request_deserializer=task__pb2.GetTaskReq.FromString,
                    response_serializer=task__pb2.GetTaskRes.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tasks.TasksService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('tasks.TasksService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TasksService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tasks.TasksService/CreateTask',
            task__pb2.CreateTaskRequest.SerializeToString,
            task__pb2.CreateTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tasks.TasksService/UpdateTask',
            task__pb2.UpdateTaskReq.SerializeToString,
            task__pb2.UpdateTaskRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tasks.TasksService/GetTasks',
            task__pb2.GetTasksReq.SerializeToString,
            task__pb2.GetTasksRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tasks.TasksService/DeleteTask',
            task__pb2.DeleteTaskReq.SerializeToString,
            task__pb2.DeleteTaskRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tasks.TasksService/GetTask',
            task__pb2.GetTaskReq.SerializeToString,
            task__pb2.GetTaskRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
